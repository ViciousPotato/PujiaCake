// Generated by CoffeeScript 1.4.0
(function() {
  var ExpressFee, Product, debug, mongoose, _;

  mongoose = require('mongoose');

  Product = require('../models/product');

  ExpressFee = require('../models/express-fee');

  _ = require('underscore');

  debug = require('debug')('routes/cart');

  module.exports = function(app) {
    app.get('/cart/add/:productid', function(req, res) {
      return Product.find({
        _id: req.params.productid
      }, function(err, products) {
        var p, prod, product, productid;
        product = products[0];
        productid = product._id.toString();
        if (req.session['cart'] === void 0) {
          debug("cart is undefined");
          req.session['cart'] = [
            {
              quantity: 1,
              product: product,
              id: productid
            }
          ];
        } else {
          debug(console.log("cart is defined=" + req.session.cart));
          p = (function() {
            var _i, _len, _ref, _results;
            _ref = req.session['cart'];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              prod = _ref[_i];
              if (prod.id === productid) {
                _results.push(prod);
              }
            }
            return _results;
          })();
          if (p.length === 0) {
            req.session['cart'].push({
              quantity: 1,
              id: productid,
              product: product
            });
          } else {
            p[0].quantity++;
          }
        }
        return res.render('cart.jade', {
          cart: req.session['cart']
        });
      });
    });
    app.get('/cart/remove/:productid', function(req, res) {
      var newcart;
      newcart = _.map(req.session['cart'], function(product) {
        if (product.id === req.params.productid) {
          product.quantity--;
        }
        if (product.quantity < 0) {
          product.quantity = 0;
        }
        return product;
      });
      req.session['cart'] = newcart;
      return res.render('cart.jade', {
        cart: req.session['cart']
      });
    });
    app.get('/cart/delete/:productid', function(req, res) {
      var item;
      req.session['cart'] = (function() {
        var _i, _len, _ref, _results;
        _ref = req.session['cart'];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item.id !== req.params.productid) {
            _results.push(item);
          }
        }
        return _results;
      })();
      return res.redirect('/cart');
    });
    app.get('/cart', function(req, res) {
      return res.render('cart.jade', {
        cart: req.session['cart']
      });
    });
    app.get('/cart/checkout', function(req, res) {
      return res.render('cart_checkout.jade');
    });
    app.post('/cart/confirm-order', function(req, res) {
      var amount, amount_reducer, cart, order;
      cart = req.session.cart;
      amount_reducer = function(sum, product) {
        return product.quantity * product.product.memberPrice + sum;
      };
      amount = _.reduce(cart, amount_reducer, 0);
      order = Order({
        products: req.session['cart'],
        userId: req.session['user']._id,
        addressId: req.param("address"),
        status: 'paid',
        amount: amount
      });
      return order.save(function(err) {
        return res.redirect('/member/orders');
      });
    });
    return app.get('/cart/express-fee/:province', function(req, res) {
      var cart, province, user, weight;
      cart = req.session.cart;
      user = req.session.user;
      province = req.params.province;
      debug('calculating express fee for %s', province);
      debug('cart is ', cart);
      weight = _.reduce(cart, function(sum, item) {
        return sum + item.quantity * item.product.weight;
      }, 0);
      debug('calculating express fee for weight ', weight);
      return ExpressFee.findOne({
        province: province
      }, function(error, expressFee) {
        if (error) {
          return res.json({
            error: error
          });
        }
        debug('Found express fee: ', expressFee);
        return res.json({
          sfFee: expressFee.calculateSFFee(weight),
          otherFee: expressFee.calculateOthersFee(weight)
        });
      });
    });
  };

}).call(this);
