// Generated by CoffeeScript 1.4.0
(function() {
  var ExpressFee, Order, Product, debug, mongoose, _;

  mongoose = require('mongoose');

  Product = require('../models/product');

  ExpressFee = require('../models/express-fee');

  Order = require('../models/order');

  _ = require('underscore');

  debug = require('debug')('routes/cart');

  module.exports = function(app) {
    var amountCart, weightCart;
    amountCart = function(cart) {
      var amount_reducer;
      amount_reducer = function(sum, product) {
        return product.quantity * product.product.memberPrice + sum;
      };
      return _.reduce(cart, amount_reducer, 0);
    };
    weightCart = function(cart) {
      return _.reduce(cart, function(sum, item) {
        return sum + item.quantity * item.product.weight;
      }, 0);
    };
    app.get('/cart', function(req, res) {
      return res.render('cart.jade', {
        cart: req.session.cart
      });
    });
    app.get('/cart/add/:productid', function(req, res) {
      return Product.findOne({
        _id: req.params.productid
      }, function(error, product) {
        var p, productid;
        if (product === null && !error) {
          error = {
            message: '无法找到产品'
          };
        }
        if (error) {
          return res.render('error.jade', {
            error: error
          });
        }
        productid = product._id.toString();
        if (!req.session.cart) {
          req.session.cart = [];
        }
        p = _.find(req.session.cart, function(p) {
          return p.id === productid;
        });
        if (p) {
          p.quantity++;
        } else {
          req.session.cart.push({
            quantity: 1,
            id: productid,
            product: product
          });
        }
        return res.render('cart.jade', {
          cart: req.session.cart
        });
      });
    });
    app.get('/cart/remove/:productid', function(req, res) {
      var newcart;
      newcart = _.map(req.session.cart, function(product) {
        if (product.id === req.params.productid) {
          product.quantity--;
        }
        if (product.quantity < 0) {
          product.quantity = 0;
        }
        return product;
      });
      req.session.cart = newcart;
      return res.render('cart.jade', {
        cart: req.session.cart
      });
    });
    app.get('/cart/delete/:productid', function(req, res) {
      var productid;
      productid = req.params.productid;
      req.session.cart = _.filter(req.session.cart, function(item) {
        return item.id !== productid;
      });
      return res.redirect('/cart');
    });
    app.get('/cart/checkout', function(req, res) {
      var cart, provinces;
      cart = req.session.cart;
      provinces = _.map(req.session.user.addresses, function(address) {
        return address.province;
      });
      return ExpressFee.find({
        province: {
          $in: provinces
        }
      }, function(error, fees) {
        var calcFees, weight;
        if (error) {
          return res.render('error.jade', {
            error: error
          });
        }
        weight = weightCart(cart);
        calcFees = _.map(fees, function(fee) {
          return {
            province: fee.province,
            sfFee: fee.calculateSFFee(weight),
            otherFee: fee.calculateOthersFee(weight)
          };
        });
        return res.render('cart_checkout.jade', {
          amount: amountCart(cart),
          fees: calcFees,
          weight: weight
        });
      });
    });
    app.post('/cart/confirm-order', function(req, res) {
      var amount, order;
      amount = amountCart(req.session.cart);
      order = Order({
        products: req.session.cart,
        userId: req.session.user._id,
        addressId: req.body.addressId,
        status: 'paid',
        amount: amount
      });
      req.session.cart = [];
      return order.save(function(error) {
        return res.redirect('/member/orders');
      });
    });
    return app.get('/cart/express-fee/:province', function(req, res) {
      var cart, province, user, weight;
      cart = req.session.cart;
      user = req.session.user;
      province = req.params.province;
      debug('calculating express fee for %s', province);
      debug('cart is ', cart);
      weight = _.reduce(cart, function(sum, item) {
        return sum + item.quantity * item.product.weight;
      }, 0);
      debug('calculating express fee for weight ', weight);
      return ExpressFee.findOne({
        province: province
      }, function(error, expressFee) {
        if (error) {
          return res.json({
            error: error
          });
        }
        debug('Found express fee: ', expressFee);
        return res.json({
          sfFee: expressFee.calculateSFFee(weight),
          otherFee: expressFee.calculateOthersFee(weight)
        });
      });
    });
  };

}).call(this);
