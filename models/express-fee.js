// Generated by CoffeeScript 1.4.0
(function() {
  var ExpressFee, debug, expressFeeSchema, mongoose, _;

  mongoose = require('mongoose');

  _ = require('underscore');

  debug = require('debug')('models/express-fee');

  expressFeeSchema = new mongoose.Schema({
    province: String,
    sfFee: {
      basicFee: {
        type: Number
      },
      basicWeight: {
        type: Number
      },
      extraFeeUnit: {
        type: Number
      },
      extraWeightUnit: {
        type: Number
      }
    },
    othersFee: {
      basicFee: {
        type: Number
      },
      basicWeight: {
        type: Number
      },
      extraFeeUnit: {
        type: Number
      },
      extraWeightUnit: {
        type: Number
      }
    }
  });

  expressFeeSchema.methods.flatten = function() {
    return {
      _id: this._id,
      province: this.province,
      sfFee_basicFee: this.sfFee.basicFee,
      sfFee_basicWeight: this.sfFee.basicWeight,
      sfFee_extraFeeUnit: this.sfFee.extraFeeUnit,
      sfFee_extraWeightUnit: this.sfFee.extraWeightUnit,
      othersFee_basicFee: this.othersFee.basicFee,
      othersFee_basicWeight: this.othersFee.basicWeight,
      othersFee_extraFeeUnit: this.othersFee.extraFeeUnit,
      othersFee_extraWeightUnit: this.othersFee.extraWeightUnit
    };
  };

  expressFeeSchema.statics.listFlatten = function(callback) {
    return this.find({}, function(error, fees) {
      var flatten;
      if (error) {
        return callback(error);
      }
      flatten = _.map(fees, function(fee) {
        return fee.flatten();
      });
      return callback(null, flatten);
    });
  };

  expressFeeSchema.statics.updateFlatten = function(id, key, val, callback) {
    var set;
    key = key.split('_').join('.');
    set = {};
    set[key] = val;
    debug('updating with id=%s, key=%s, val=%s', id, key, val);
    return this.update({
      _id: id
    }, {
      $set: set
    }, function(error) {
      if (error) {
        return callback(error);
      }
      return callback(null);
    });
  };

  expressFeeSchema.methods.calculateFee = function(type, weight) {
    var basicFee, basicWeight, extraFee, extraFeeUnit, extraWeightUnit, fee;
    fee = type === 'sf' ? this.sfFee : this.othersFee;
    basicWeight = fee.basicWeight;
    basicFee = fee.basicFee;
    extraFeeUnit = fee.extraFeeUnit;
    extraWeightUnit = fee.extraWeightUnit;
    if (weight <= basicWeight) {
      return basicFee;
    }
    extraFee = Math.ceil((weight - basicWeight) / extraWeightUnit) * extraFeeUnit;
    return basicFee + extraFee;
  };

  expressFeeSchema.methods.calculateSFFee = function(weight) {
    return this.calculateFee('sf', weight);
  };

  expressFeeSchema.methods.calculateOthersFee = function(weight) {
    return this.calculateFee('others', weight);
  };

  ExpressFee = mongoose.model('ExpressFee', expressFeeSchema);

  module.exports = ExpressFee;

}).call(this);
